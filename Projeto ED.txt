#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct No{
    char data[50];
    struct No *prox;
}No;

void adicionarFila(No **front, No **back, const char *valor){
    No *novoNo = (No *)malloc(sizeof(No));
    strcpy(novoNo->data, valor);
        if(*back == NULL){
            *front = novoNo;
            *back = novoNo;
            novoNo->prox = NULL;
        }else{
            (*back)->prox = novoNo;
            *back = novoNo;
        }
    printf("Paciente adicionado à fila\n");
}

int pilhaVazia(No *topo){
    if(topo == NULL){
        printf("Nenhum paciente foi atendido ainda\n");
        return 1;
    }
    return 0;
}

int filaVazia(No *inicio){
    if(inicio == NULL)
        return 1;
    return 0;
}

void mostrarPilha(No *topo){
    printf("\nPacientes atendidos:\n");
    No *pNo = topo;
    while(pNo != NULL){
        printf("\t| %s |\n",pNo->data);
        pNo = pNo->prox;
        }
}

void mostrarFila(No *f, No *fP){
    printf("\nPacientes a serem atendidos:\n");
    No *no = f;
    No *noP = fP;
    while(noP != NULL){
        printf("\t| %s |\n", noP->data);
        noP = noP->prox;
    }
    while(no != NULL){
        printf("\t| %s |\n", no->data);
        no = no->prox;
    }
}

void atenderPaciente(No **front, No **back, No **topo){
    No *temp = *front;
    char valor[50];
    strcpy(valor, temp->data);
    *front = (*front)->prox;
    if(*front == NULL){  // Se front == NULL, a lista está vazia
        *back = NULL;
    }
    temp->prox = NULL;
    if(*topo != NULL)
        temp->prox = *topo;
    *topo = temp;
}

void limparLista(No *lista){
    No *temp;
    while (lista != NULL){
        temp = lista;
        lista = lista->prox;
        free(temp);
    }
}

int removerFila(No **lista, const char *valor) {
    No *atual = *lista;
    No *anterior = NULL;
    
    if(atual == NULL) {
        return 0;
    }
    if(strcmp(atual->data, valor) == 0){
        *lista = atual->prox;
        free(atual);
        return 1;
    }
    while(atual != NULL && strcmp(atual->data, valor) != 0){
        anterior = atual;
        atual = atual->prox;
    }
    anterior->prox = atual->prox;
    free(atual);
    return 1;
}

int main()
{
    No *topo = NULL;
    No *inicio = NULL;
    No *fim = NULL;
    No *inicioP = NULL;
    No *fimP = NULL;
    char valor[50];
    char simNao;
    char opcao = -1;
    do{
        printf("\n========================================\n"
               "    SISTEMA DE GERENCIAMENTO DE FILA    \n"
               "========================================\n"
               "1 - Adicionar paciente à fila\n"
               "2 - Atender próximo paciente\n"
               "3 - Mostrar fila de espera\n"
               "4 - Mostrar pacientes já atendidos\n"
               "5 - Ver próximo paciente\n"
               "6 - Ver último paciente atendido\n"
               "7 - Remover paciente da fila\n"
               "0 - Encerrar o programa\n\n"
               "Digite a opção desejada: ");
        scanf("%hhu",&opcao);
        switch(opcao){
            case 1:
                printf("Digite a identidade do paciente: ");
                scanf(" %[^\n]", valor);
                printf("O paciente recebe atendimento prioritário? (y/n)\n");
                scanf(" %c", &simNao);
                if(simNao == 'n' || simNao == 'N')
                    adicionarFila(&inicio, &fim, valor);
                else if(simNao == 'y' || simNao == 'Y')
                    adicionarFila(&inicioP, &fimP, valor);
                else
                    printf("Resposta inválida!");
                break;
            case 2:
                if(!filaVazia(inicio) || !filaVazia(inicioP)){
                    if(inicioP == NULL)
                        atenderPaciente(&inicio, &fim, &topo);
                    else   
                        atenderPaciente(&inicioP, &fimP, &topo);
                    printf("Paciente removido da fila\n");
                }
                else
                    printf("Nenhum paciente foi atendido, pois a fila estava vazia.");
                break;
            case 3:
                if(!filaVazia(inicio) || !filaVazia(inicioP))
                    mostrarFila(inicio, inicioP);
                else
                    printf("A fila está vazia\n");
                break;
            case 4:
                if(!pilhaVazia(topo))
                    mostrarPilha(topo);
                break;
            case 5:
                if(!filaVazia(inicioP))
                    printf("Próximo paciente é: %s\n",inicioP->data);
                else if(!filaVazia(inicio))
                    printf("Próximo paciente é: %s\n",inicio->data);
                break;
            case 6:
                if(!pilhaVazia(topo))
                    printf("Último paciente atendido foi:  %s\n",topo->data);
                break;
            case 7:
                printf("Digite a identidade do paciente: ");
                scanf(" %[^\n]", valor);
                if(removerFila(&inicio, valor) || removerFila(&inicioP, valor))
                    printf("O paciente foi removido da fila\n");
                else
                    printf("O paciente não foi encontrado\n");
                    break;
            default:
                printf("Opção inválida!\n");
        }
    }while(opcao != 0);
    printf("Encerrando o programa...\n");
    limparLista(inicioP);limparLista(inicio);limparLista(topo);
    return 0;
}